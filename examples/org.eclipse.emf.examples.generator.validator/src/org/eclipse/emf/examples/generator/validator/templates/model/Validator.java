package org.eclipse.emf.examples.generator.validator.templates.model;\n\nimport org.eclipse.emf.codegen.ecore.genmodel.*;\nimport org.eclipse.emf.examples.generator.validator.ValidatorGeneratorUtil;\n\npublic class Validator\n  protected static String nl;\n  public static synchronized Validator create(String lineSeparator)\n  {\n    nl = lineSeparator;\n    Validator result = new Validator();\n    nl = null;\n    return result;\n  }\n\n  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;\n  protected final String TEXT_1 = "";\n  protected final String TEXT_2 = "/**" + NL + " *" + NL + " * ";\n  protected final String TEXT_3 = "Id";\n  protected final String TEXT_4 = NL + " */" + NL + "package ";\n  protected final String TEXT_5 = ";" + NL;\n  protected final String TEXT_6 = NL + NL + "/**" + NL + " * A sample validator interface for {@link ";\n  protected final String TEXT_7 = "}." + NL + " * This doesn't really do anything, and it's not a real EMF artifact." + NL + " * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended." + NL + " * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false." + NL + " */" + NL + "public interface ";\n  protected final String TEXT_8 = NL + "{" + NL + "\tboolean validate();" + NL;\n  protected final String TEXT_9 = NL + "\tboolean validate";\n  protected final String TEXT_10 = "(";\n  protected final String TEXT_11 = " value);";\n  protected final String TEXT_12 = NL + "}";\n  protected final String TEXT_13 = NL;\n\n{\n  public String generate(Object argument)\n  {\n    final StringBuffer stringBuffer = new StringBuffer();\n    GenClass genClass = (GenClass)argument; GenPackage genPackage = genClass.getGenPackage(); GenModel genModel = genPackage.getGenModel();\n    stringBuffer.append(TEXT_1);\n    stringBuffer.append(TEXT_2);\n    stringBuffer.append("$");\n    stringBuffer.append(TEXT_3);\n    stringBuffer.append("$");\n    stringBuffer.append(TEXT_4);\n    stringBuffer.append(ValidatorGeneratorUtil.getValidationPackageName(genPackage));\n    stringBuffer.append(TEXT_5);\n    genModel.markImportLocation(stringBuffer);\n    stringBuffer.append(TEXT_6);\n    stringBuffer.append(genClass.getQualifiedInterfaceName());\n    stringBuffer.append(TEXT_7);\n    stringBuffer.append(ValidatorGeneratorUtil.getValidatorInterfaceName(genClass));\n    stringBuffer.append(TEXT_8);\n    for (GenFeature genFeature : genClass.getGenFeatures()) {\n    stringBuffer.append(TEXT_9);\n    stringBuffer.append(genFeature.getAccessorName());\n    stringBuffer.append(TEXT_10);\n    stringBuffer.append(genFeature.getImportedType(null));\n    stringBuffer.append(TEXT_11);\n    }\n    stringBuffer.append(TEXT_12);\n    genModel.emitSortedImports();\n    stringBuffer.append(TEXT_13);\n    return stringBuffer.toString();\n  }\n
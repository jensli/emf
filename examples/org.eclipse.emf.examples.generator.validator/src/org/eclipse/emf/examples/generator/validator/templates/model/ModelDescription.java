package org.eclipse.emf.examples.generator.validator.templates.model;\n\nimport org.eclipse.emf.codegen.ecore.genmodel.*;\nimport org.eclipse.emf.examples.generator.validator.ValidatorGeneratorUtil;\n\npublic class ModelDescription\n  protected static String nl;\n  public static synchronized ModelDescription create(String lineSeparator)\n  {\n    nl = lineSeparator;\n    ModelDescription result = new ModelDescription();\n    nl = null;\n    return result;\n  }\n\n  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;\n  protected final String TEXT_1 = "Model ";\n  protected final String TEXT_2 = NL + NL + "This model description is not a real EMF artifact. It was generated by the" + NL + "org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's" + NL + "code generator can be extended." + NL + "This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false." + NL;\n  protected final String TEXT_3 = NL + "Contains packages:";\n  protected final String TEXT_4 = NL + "  ";\n  protected final String TEXT_5 = " <";\n  protected final String TEXT_6 = ">";\n  protected final String TEXT_7 = NL;\n  protected final String TEXT_8 = NL + "Package ";\n  protected final String TEXT_9 = " <";\n  protected final String TEXT_10 = ">" + NL;\n  protected final String TEXT_11 = NL + "  Class ";\n  protected final String TEXT_12 = NL + "    ";\n  protected final String TEXT_13 = " ";\n  protected final String TEXT_14 = "/";\n  protected final String TEXT_15 = " : ";\n  protected final String TEXT_16 = NL + "    Operation ";\n  protected final String TEXT_17 = " : ";\n  protected final String TEXT_18 = NL;\n  protected final String TEXT_19 = NL + "  Enum ";\n  protected final String TEXT_20 = NL + "    Literal ";\n  protected final String TEXT_21 = " = ";\n  protected final String TEXT_22 = NL;\n  protected final String TEXT_23 = NL + "  DataType ";\n  protected final String TEXT_24 = " <";\n  protected final String TEXT_25 = ">" + NL;\n\n{\n  public String generate(Object argument)\n  {\n    final StringBuffer stringBuffer = new StringBuffer();\n    GenModel genModel = (GenModel)argument;\n    stringBuffer.append(TEXT_1);\n    stringBuffer.append(genModel.getModelName());\n    stringBuffer.append(TEXT_2);\n    if (genModel.getGenPackages().size() > 1) {\n    stringBuffer.append(TEXT_3);\n    for (GenPackage genPackage : genModel.getGenPackages()) {\n    stringBuffer.append(TEXT_4);\n    stringBuffer.append(genPackage.getPackageName());\n    stringBuffer.append(TEXT_5);\n    stringBuffer.append(genPackage.getNSURI());\n    stringBuffer.append(TEXT_6);\n    }\n    stringBuffer.append(TEXT_7);\n    }\n    for (GenPackage genPackage : genModel.getGenPackages()) {\n    stringBuffer.append(TEXT_8);\n    stringBuffer.append(genPackage.getPackageName());\n    stringBuffer.append(TEXT_9);\n    stringBuffer.append(genPackage.getNSURI());\n    stringBuffer.append(TEXT_10);\n    for (GenClassifier genClassifier : genPackage.getGenClassifiers()) {\n    if (genClassifier instanceof GenClass) { GenClass genClass = (GenClass)genClassifier;\n    stringBuffer.append(TEXT_11);\n    stringBuffer.append(genClass.getName());\n    stringBuffer.append(ValidatorGeneratorUtil.getSuperTypesExpression(genClass));\n    for (GenFeature genFeature : genClass.getGenFeatures()) {\n    String keyword = genFeature.isReferenceType() ? "Reference" : "Attribute";\n    stringBuffer.append(TEXT_12);\n    stringBuffer.append(keyword);\n    stringBuffer.append(TEXT_13);\n    if (genFeature.isDerived()) {\n    stringBuffer.append(TEXT_14);\n    }\n    stringBuffer.append(genFeature.getName());\n    stringBuffer.append(TEXT_15);\n    stringBuffer.append(ValidatorGeneratorUtil.getTypeExpression(genFeature));\n    }\n    for (GenOperation genOperation : genClass.getGenOperations()) {\n    stringBuffer.append(TEXT_16);\n    stringBuffer.append(genOperation.getName());\n    stringBuffer.append(ValidatorGeneratorUtil.getParameterExpression(genOperation));\n    stringBuffer.append(TEXT_17);\n    stringBuffer.append(ValidatorGeneratorUtil.getTypeExpression(genOperation));\n    }\n    stringBuffer.append(TEXT_18);\n    } else if (genClassifier instanceof GenEnum) { GenEnum genEnum = (GenEnum)genClassifier;\n    stringBuffer.append(TEXT_19);\n    stringBuffer.append(genEnum.getName());\n    for (GenEnumLiteral genEnumLiteral : genEnum.getGenEnumLiterals()) {\n    stringBuffer.append(TEXT_20);\n    stringBuffer.append(genEnumLiteral.getName());\n    stringBuffer.append(TEXT_21);\n    stringBuffer.append(genEnumLiteral.getValue());\n    }\n    stringBuffer.append(TEXT_22);\n    } else if (genClassifier instanceof GenDataType) { GenDataType genDataType = (GenDataType)genClassifier;\n    stringBuffer.append(TEXT_23);\n    stringBuffer.append(genDataType.getName());\n    stringBuffer.append(TEXT_24);\n    stringBuffer.append(genDataType.getEcoreDataType().getInstanceClassName());\n    stringBuffer.append(TEXT_25);\n    }\n    }\n    }\n    return stringBuffer.toString();\n  }\n